package eu.devexpert.maven.plugins;

import java.io.File;
import java.io.FileWriter;
import java.io.StringWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.maven.plugins.annotations.Execute;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.ResolutionScope;

import com.phloc.css.ECSSVersion;
import com.phloc.css.decl.CascadingStyleSheet;
import com.phloc.css.reader.CSSReader;
import com.phloc.css.writer.CSSWriter;
import com.phloc.css.writer.CSSWriterSettings;

@Mojo(name = "extract", requiresDependencyResolution = ResolutionScope.RUNTIME, threadSafe = true)
@Execute(goal = "extract", phase = LifecyclePhase.COMPILE)
public class CssExtractor extends CssMojo {

	public void execute() {
		System.out.println("CALL MY PLUGIN" + sourcedir);
		try {
			FileExtractor fileProcessor = new FileExtractor(mimeTypes, cssRulePrefix, classAttribute, cssRulePrefixUseFileName, sourcedir, outputdir);
			Map<String, String> maps = new HashMap<String, String>();
			for (String cls : fileProcessor.getClassesMap().keySet()) {
				List<String> newStyles = fileProcessor.getClassesMap().get(cls);
				if (newStyles.size() == 1) {
					maps.put(newStyles.get(0), cls);
				}
			}

			Files.walkFileTree(Paths.get(sourcedir), fileProcessor);
			System.out.println("PRIOCESSED: " + fileProcessor.getPaths().size());

			CSSWriterSettings settings = new CSSWriterSettings(ECSSVersion.CSS30);

			CSSWriter writer = new CSSWriter(settings);
			writer.setHeaderText("Generated by PARSER-CSS(www.devexpert.eu)");

			StringWriter cssContent = new StringWriter();
			for (Path path : fileProcessor.getPaths().keySet()) {
				for (String cssName : fileProcessor.getPaths().get(path).keySet()) {
					String rule = null;
					if (maps.get(cssName) != null) {
						rule = "." + maps.get(cssName) + "{" + fileProcessor.getPaths().get(path).get(cssName) + "}";
					} else {
						rule = "." + cssName + "{" + fileProcessor.getPaths().get(path).get(cssName) + "}";
					}
					cssContent.write(rule);
				}
			}
			System.out.println(cssContent);
			CascadingStyleSheet css = CSSReader.readFromString(cssContent.toString(), "UTF-8", ECSSVersion.CSS30);
			writer.writeCSS(css, new FileWriter(new File(outputcss)));

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

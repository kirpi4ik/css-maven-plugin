package eu.devexpert.maven.plugins;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.Execute;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.ResolutionScope;

import com.phloc.css.ECSSVersion;
import com.phloc.css.decl.CSSSelector;
import com.phloc.css.decl.CSSStyleRule;
import com.phloc.css.decl.CascadingStyleSheet;
import com.phloc.css.reader.CSSReader;
import com.phloc.css.writer.CSSWriter;
import com.phloc.css.writer.CSSWriterSettings;

import eu.devexpert.maven.plugins.api.Optimizer;

@Optimizer(id = "keyworder")
@Mojo(name = "keyworder", requiresDependencyResolution = ResolutionScope.RUNTIME, threadSafe = true)
@Execute(goal = "keyworder", phase = LifecyclePhase.COMPILE)
public class CssKeyworder extends CssMojo {

	public void execute() throws MojoExecutionException, MojoFailureException {
		System.out.println("KEYWORDER");
		CSSWriterSettings settings = new CSSWriterSettings(ECSSVersion.CSS30);
		CSSWriter writer = new CSSWriter(settings);
		writer.setHeaderText("Generated by PARSER-CSS(www.devexpert.eu)");
		System.out.println(sourcecss);
		CascadingStyleSheet css = CSSReader.readFromFile(new File(sourcecss), "UTF-8", ECSSVersion.CSS30);
		List<CSSStyleRule> rules = css.getAllStyleRules();
		Map<String, String> rulesToReplace = new HashMap<String, String>();
		for (CSSStyleRule cssStyleRule : rules) {
			if (cssStyleRule.getAllDeclarations().size() == 1) {
				for (Keyword keyword : Keyword.values()) {
					if (cssStyleRule.getAllDeclarations().get(0).equals(keyword.getDeclaration())) {
						css.removeRule(cssStyleRule);
						CSSStyleRule newRule = new CSSStyleRule();
						newRule.addSelector(keyword.getSelector());
						newRule.addDeclaration(keyword.getDeclaration());
						css.addRule(newRule);
						for (CSSSelector selector : cssStyleRule.getAllSelectors()) {
							rulesToReplace.put(selector.getAllMembers().get(0).getAsCSSString(new CSSWriterSettings(ECSSVersion.CSS30), 0).substring(1), keyword.getName());
						}
					}
				}
			}
		}

		try {
			writer.writeCSS(css, new FileWriter(new File(outputcss)));
			FileOptimizer optimizer = new FileOptimizer(sourcedir, outputdir, mimeTypes, classAttribute, rulesToReplace);
			Files.walkFileTree(Paths.get(sourcedir), optimizer);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
}
